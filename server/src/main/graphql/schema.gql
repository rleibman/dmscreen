schema {
  query: Queries
  mutation: Mutations
  subscription: Subscriptions
}
scalar Json
scalar Long
scalar Unit

union DMScreenOperation = Add | Copy | Move | Remove | Replace | Test

enum Alignment {
  ChaoticEvil
  ChaoticGood
  ChaoticNeutral
  LawfulEvil
  LawfulGood
  LawfulNeutral
  NeutralEvil
  NeutralGood
  TrueNeutral
}

enum Biome {
  Arctic
  Coastal
  Desert
  Forest
  Grassland
  Hill
  Mountain
  Swamp
  Underdark
  Underwater
  Urban
}

enum CreatureSize {
  Gargantuan
  Huge
  Large
  Medium
  Small
  Tiny
}

enum DND5eEntityType {
  campaign
  encounter
  monster
  nonPlayerCharacter
  playerCharacter
  scene
  spell
}

enum GameSystem {
  dnd5e
  pathfinder2e
  starTrekAdventures
}

enum MonsterSearchOrder {
  alignment
  challengeRating
  environment
  monsterType
  name
  size
  source
}

enum MonsterType {
  Aberration
  Beast
  Celestial
  Construct
  Dragon
  Elemental
  Fey
  Fiend
  Giant
  Humanoid
  Monstrosity
  Ooze
  Plant
  Undead
}

enum OrderDirection {
  asc
  desc
}

input SourceInput {
  name: String!
  id: String!
  url: String
}

type Add {
  path: JsonPath!
  value: Json!
}

type Background {
  name: String!
}

type CampaignHeader {
  id: Long!
  dm: Long!
  name: String!
  gameSystem: GameSystem!
}

type CharacterClass {
  id: String!
  hitDice: String!
}

type Copy {
  from: JsonPath!
  to: JsonPath!
}

type DND5eCampaign {
  header: CampaignHeader!
  jsonInfo: Json!
}

type Encounter {
  header: EncounterHeader!
  jsonInfo: Json!
}

type EncounterHeader {
  id: Long!
  campaignId: Long!
  name: String!
}

type JsonPath {
  value: String!
}

type Monster {
  header: MonsterHeader!
  jsonInfo: Json!
}

type MonsterHeader {
  id: Long!
  name: String!
  monsterType: MonsterType!
  biome: Biome
  alignment: Alignment
  cr: Float!
  xp: Int!
  ac: Int!
  hp: Int!
  size: CreatureSize!
}

type Move {
  from: JsonPath!
  to: JsonPath!
}

type Mutations {
  applyOperations(entityType: DND5eEntityType!, id: Long!, operations: [Json!]!): Unit
}

type NonPlayerCharacter {
  header: NonPlayerCharacterHeader!
  jsonInfo: Json!
}

type NonPlayerCharacterHeader {
  id: Long!
  campaignId: Long!
  name: String!
}

type PlayerCharacter {
  header: PlayerCharacterHeader!
  jsonInfo: Json!
}

type PlayerCharacterHeader {
  id: Long!
  campaignId: Long!
  name: String!
  playerName: String
}

type Queries {
  campaigns: [CampaignHeader!]
  campaign(value: Long!): DND5eCampaign
  playerCharacters(value: Long!): [PlayerCharacter!]
  nonPlayerCharacters(value: Long!): [NonPlayerCharacter!]
  encounters(value: Long!): [EncounterHeader!]
  encounter(value: Long!): [Encounter!]
  bestiary(name: String, challengeRating: Float, size: String, alignment: String, environment: String, monsterType: MonsterType, source: SourceInput, order: MonsterSearchOrder!, orderDir: OrderDirection!, page: Int!, pageSize: Int!): [Monster!]
  sources: [Source!]
  classes: [CharacterClass!]
  races: [Race!]
  backgrounds: [Background!]
  subclasses(value: String!): [Subclass!]
}

type Race {
  name: String!
}

type Remove {
  path: JsonPath!
}

type Replace {
  path: JsonPath!
  value: Json!
}

type Source {
  name: String!
  id: String!
  url: String
}

type Subclass {
  name: String!
}

type Subscriptions {
  operationStream(entityType: DND5eEntityType!, id: Long!, operations: [Json!]!): DMScreenOperation
}

type Test {
  path: JsonPath!
  value: Json!
}

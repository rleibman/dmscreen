schema {
  query: Queries
  mutation: Mutations
  subscription: Subscriptions
}
scalar Json
"A date-time without a time-zone in the ISO-8601 calendar system in the format of 1970-01-01T00:00:00"
scalar LocalDateTime
scalar Long
scalar Unit

union DMScreenEvent = Add | CombatLog | Copy | GeneralLog | Move | Remove | Replace | Test

enum Alignment {
  chaoticEvil
  chaoticGood
  chaoticNeutral
  lawfulEvil
  lawfulGood
  lawfulNeutral
  neutralEvil
  neutralGood
  trueNeutral
  unaligned
  unknown
}

enum Biome {
  Arctic
  Coastal
  Desert
  Forest
  Grassland
  Hill
  Mountain
  Swamp
  Underdark
  Underwater
  Urban
}

enum CampaignStatus {
  active
  archived
}

enum CreatureSize {
  gargantuan
  huge
  large
  medium
  small
  tiny
  unknown
}

enum GameSystem {
  callOfCthulhu
  dnd3_5
  dnd4e
  dnd5e
  fateAccelerated
  fateCore
  pathfinder1e
  pathfinder2e
  savageWorlds
  starTrekAdventures
  starfinder
}

enum MonsterSearchOrder {
  alignment
  biome
  challengeRating
  monsterType
  name
  random
  size
}

enum MonsterType {
  Aberration
  Beast
  Celestial
  Construct
  Dragon
  Elemental
  Fey
  Fiend
  Giant
  Humanoid
  Monstrosity
  Ooze
  Plant
  Swarm
  Undead
  Unknown
}

enum OrderDirection {
  asc
  desc
}

input CampaignHeaderInput {
  id: Long!
  dmUserId: Long!
  name: String!
  gameSystem: GameSystem!
  campaignStatus: CampaignStatus!
}

input EncounterHeaderInput {
  id: Long!
  campaignId: Long!
  name: String!
  status: String!
  sceneId: Long
  orderCol: Int!
}

input MonsterHeaderInput {
  id: Long!
  sourceId: String!
  name: String!
  monsterType: MonsterType!
  biome: Biome
  alignment: Alignment
  cr: Float!
  xp: Long!
  armorClass: Int!
  maximumHitPoints: Int!
  size: CreatureSize!
  initiativeBonus: Int!
}

input NonPlayerCharacterHeaderInput {
  id: Long!
  campaignId: Long!
  name: String!
}

input PlayerCharacterHeaderInput {
  id: Long!
  campaignId: Long!
  name: String!
  source: String!
  playerName: String
}

input PlayerCharacterSearchInput {
  dndBeyondId: String
}

input SceneHeaderInput {
  id: Long!
  campaignId: Long!
  name: String!
  orderCol: Int!
  isActive: Boolean!
}

input SourceInput {
  name: String!
  id: String!
  url: String
}

type Add {
  path: JsonPath!
  value: Json!
}

type Background {
  name: String!
}

type Campaign {
  header: CampaignHeader!
  jsonInfo: Json!
  version: String!
}

type CampaignHeader {
  id: Long!
  dmUserId: Long!
  name: String!
  gameSystem: GameSystem!
  campaignStatus: CampaignStatus!
}

type CampaignLogEntry {
  campaignId: Long!
  message: String!
  timestamp: LocalDateTime!
}

type CharacterClass {
  id: String!
  hitDice: DiceRoll!
}

type CombatLog {
  message: String!
  json: Json!
}

type Copy {
  from: JsonPath!
  to: JsonPath!
}

type DiceRoll {
  roll: String!
}

type Encounter {
  header: EncounterHeader!
  jsonInfo: Json!
  version: String!
}

type EncounterHeader {
  id: Long!
  campaignId: Long!
  name: String!
  status: String!
  sceneId: Long
  orderCol: Int!
}

type GeneralLog {
  message: String!
  json: Json!
}

type JsonPath {
  value: String!
}

type Monster {
  header: MonsterHeader!
  jsonInfo: Json!
  version: String!
}

type MonsterHeader {
  id: Long!
  sourceId: String!
  name: String!
  monsterType: MonsterType!
  biome: Biome
  alignment: Alignment
  cr: Float!
  xp: Long!
  armorClass: Int!
  maximumHitPoints: Int!
  size: CreatureSize!
  initiativeBonus: Int!
}

type MonsterSearchResults {
  results: [MonsterHeader!]!
  total: Long!
}

type Move {
  from: JsonPath!
  to: JsonPath!
}

type Mutations {
  upsertCampaign(header: CampaignHeaderInput!, jsonInfo: Json!, version: String!): Long
  upsertScene(header: SceneHeaderInput!, jsonInfo: Json!, version: String!): Long
  upsertPlayerCharacter(header: PlayerCharacterHeaderInput!, jsonInfo: Json!, version: String!): Long
  upsertNonPlayerCharacter(header: NonPlayerCharacterHeaderInput!, jsonInfo: Json!, version: String!): Long
  upsertMonster(header: MonsterHeaderInput!, jsonInfo: Json!, version: String!): Long
  upsertEncounter(header: EncounterHeaderInput!, jsonInfo: Json!, version: String!): Long
  deleteEntity(entityType: String!, id: Long!, softDelete: Boolean!): Unit
  importCharacterDNDBeyond(campaignId: Long!, dndBeyondId: String!, fresh: Boolean!): PlayerCharacter
  campaignLog(campaignId: Long!, message: String!): Unit
}

type NonPlayerCharacter {
  header: NonPlayerCharacterHeader!
  jsonInfo: Json!
  version: String!
}

type NonPlayerCharacterHeader {
  id: Long!
  campaignId: Long!
  name: String!
}

type PlayerCharacter {
  header: PlayerCharacterHeader!
  jsonInfo: Json!
  version: String!
}

type PlayerCharacterHeader {
  id: Long!
  campaignId: Long!
  name: String!
  source: String!
  playerName: String
}

type Queries {
  campaigns: [CampaignHeader!]
  campaign(value: Long!): Campaign
  monster(value: Long!): Monster
  playerCharacters(campaignId: Long!, playerCharacterSearch: PlayerCharacterSearchInput!): [PlayerCharacter!]
  scenes(value: Long!): [Scene!]
  nonPlayerCharacters(value: Long!): [NonPlayerCharacter!]
  playerCharacter(value: Long!): PlayerCharacter
  nonPlayerCharacter(value: Long!): NonPlayerCharacter
  encounters(value: Long!): [Encounter!]
  encounter(campaignId: Long!, encounterId: Long!): Encounter
  bestiary(name: String, challengeRating: Float, size: CreatureSize, alignment: Alignment, biome: Biome, monsterType: MonsterType, source: SourceInput, orderCol: MonsterSearchOrder!, orderDir: OrderDirection!, page: Int!, pageSize: Int!): MonsterSearchResults
  sources: [Source!]
  classes: [CharacterClass!]
  races: [Race!]
  backgrounds: [Background!]
  subclasses(value: String!): [SubClass!]
  campaignLogs(campaignId: Long!, maxNum: Int!): [CampaignLogEntry!]
}

type Race {
  name: String!
}

type Remove {
  path: JsonPath!
}

type Replace {
  path: JsonPath!
  value: Json!
}

type Scene {
  header: SceneHeader!
  jsonInfo: Json!
  version: String!
}

type SceneHeader {
  id: Long!
  campaignId: Long!
  name: String!
  orderCol: Int!
  isActive: Boolean!
}

type Source {
  name: String!
  id: String!
  url: String
}

type SubClass {
  name: String!
}

type Subscriptions {
  campaignStream(entityType: String!, id: Long!, events: [Json!]!): DMScreenEvent
}

type Test {
  path: JsonPath!
  value: Json!
}

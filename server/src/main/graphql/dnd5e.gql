schema {
    query: Queries
    mutation: Mutations
}
scalar Json
scalar Long
scalar Unit

enum ChallengeRating {
    _0
    _eigth
    _quarter
    _half
    _1
    _2
    _3
    _4
    _5
    _6
    _7
    _8
    _9
    _10
    _11
    _12
    _13
    _14
    _15
    _16
    _17
    _18
    _19
    _20
    _21
    _22
    _23
    _24
    _25
    _26
    _27
    _28
    _29
    _30
}

union Action = MultiAction | SingleAction

enum AbilityType {
    charisma
    constitution
    dexterity
    intelligence
    strength
    wisdom
}

enum ActionType {
    Ability
    Melee
    Ranged
    Spell
}

enum AdvantageDisadvantage {
    advantage
    disadvantage
    neither
}

enum Alignment {
    chaoticEvil
    chaoticGood
    chaoticNeutral
    lawfulEvil
    lawfulGood
    lawfulNeutral
    neutralEvil
    neutralGood
    trueNeutral
    unaligned
    unknown
}

enum Biome {
    Arctic
    Coastal
    Desert
    Forest
    Grassland
    Hill
    Mountain
    Swamp
    Underdark
    Underwater
    Unimportant
    Unknown
    Urban
}

enum Condition {
    blinded
    charmed
    deafened
    exhaustion
    frightened
    grappled
    incapacitated
    invisible
    paralyzed
    petrified
    poisoned
    prone
    restrained
    stunned
    unconscious
}

enum CreatureSize {
    gargantuan
    huge
    large
    medium
    small
    tiny
    unknown
}

enum Lifestyle {
    aristocratic
    comfortable
    modest
    poor
    squalid
    unknown
    wealthy
    wretched
}

enum MonsterSearchOrder {
    alignment
    biome
    challengeRating
    monsterType
    name
    random
    size
}

enum MonsterType {
    Aberration
    Beast
    Celestial
    Construct
    Dragon
    Elemental
    Fey
    Fiend
    Giant
    Humanoid
    Monstrosity
    Ooze
    Plant
    Swarm
    Undead
    Unknown
}

enum OrderDirection {
    asc
    desc
}

enum ProficiencyLevel {
    expert
    half
    none
    proficient
}

enum RandomTableType {
    adventure
    encounter
    environment
    npcs
    other
    treasure
}

enum RelationToPlayers {
    ally
    enemy
    itsComplicated
    neutral
    unknown
}

enum Sense {
    blindsight
    darkvision
    other
    scent
    sight
    tremorsense
    truesight
}

enum SkillType {
    acrobatics
    animalHandling
    arcana
    athletics
    deception
    history
    insight
    intimidation
    investigation
    medicine
    nature
    perception
    performance
    persuasion
    religion
    sleightOfHand
    stealth
    survival
}

enum SpeedType {
    burrow
    climb
    fly
    swim
    walk
}

input EncounterHeaderInput {
    id: Long!
    campaignId: Long!
    name: String!
    status: String!
    sceneId: Long
    orderCol: Int!
}

input MonsterHeaderInput {
    id: Long!
    sourceId: String!
    name: String!
    monsterType: MonsterType!
    biome: Biome
    alignment: Alignment
    cr: ChallengeRating!
    xp: Long!
    armorClass: Int!
    maximumHitPoints: Int!
    size: CreatureSize!
    initiativeBonus: Int!
}

input NonPlayerCharacterHeaderInput {
    id: Long!
    campaignId: Long!
    name: String!
}

input PlayerCharacterHeaderInput {
    id: Long!
    campaignId: Long!
    name: String!
    source: String!
    playerName: String
}

input PlayerCharacterSearchInput {
    dndBeyondId: String
}

input SceneHeaderInput {
    id: Long!
    campaignId: Long!
    name: String!
    orderCol: Int!
    isActive: Boolean!
}

input SourceInput {
    name: String!
    id: String!
    url: String
}

type Abilities {
    strength: Ability!
    dexterity: Ability!
    constitution: Ability!
    intelligence: Ability!
    wisdom: Ability!
    charisma: Ability!
}

type Ability {
    abilityType: AbilityType!
    value: Int!
    overrideValue: Int
    isProficient: Boolean!
}

type ActionDC {
    dcType: AbilityType!
    dcValue: Int!
}

type Background {
    name: String!
}

type CharacterClass {
    id: String!
    hitDice: DiceRoll!
}

type Creature {
    name: String!
    creatureType: Long!
}

type DamageType {
    description: String!
}

type DeathSave {
    fails: Int!
    successes: Int!
    isStabilized: Boolean!
}

type DiceRoll {
    roll: String!
}

type Encounter {
    header: EncounterHeader!
    jsonInfo: Json!
    version: String!
}

type EncounterHeader {
    id: Long!
    campaignId: Long!
    name: String!
    status: String!
    sceneId: Long
    orderCol: Int!
}

type Feat {
    name: String!
}

type Health {
    deathSave: DeathSave!
    currentHitPoints: Int!
    maxHitPoints: Int!
    overrideMaxHitPoints: Int
    temporaryHitPoints: Int!
}

type InventoryItem {
    name: String!
    quantity: Int!
}

"A key-value pair of Long and ListOfLong"
type KVLongListOfLong {
    "Key"
    key: Long!
    "Value"
    value: [Long!]!
}

type Language {
    name: String!
}

type Monster {
    header: MonsterHeader!
    jsonInfo: Json!
    version: String!
}

type MonsterHeader {
    id: Long!
    sourceId: String!
    name: String!
    monsterType: MonsterType!
    biome: Biome
    alignment: Alignment
    cr: ChallengeRating!
    xp: Long!
    armorClass: Int!
    maximumHitPoints: Int!
    size: CreatureSize!
    initiativeBonus: Int!
}

type MonsterSearchResults {
    results: [MonsterHeader!]!
    total: Long!
}

type MultiAction {
    name: String!
    description: String
    actions: [SingleAction!]!
}

type Mutations {
    upsertScene(header: SceneHeaderInput!, jsonInfo: Json!, version: String!): Long
    upsertPlayerCharacter(header: PlayerCharacterHeaderInput!, jsonInfo: Json!, version: String!): Long
    upsertNonPlayerCharacter(header: NonPlayerCharacterHeaderInput!, jsonInfo: Json!, version: String!): Long
    upsertMonster(header: MonsterHeaderInput!, jsonInfo: Json!, version: String!): Long
    upsertEncounter(header: EncounterHeaderInput!, jsonInfo: Json!, version: String!): Long
    deleteEntity(entityType: String!, id: Long!, softDelete: Boolean!): Unit
    importCharacterDNDBeyond(campaignId: Long!, dndBeyondId: String!, fresh: Boolean!): PlayerCharacter
    addNpcToScene(sceneId: Long!, npcId: Long!): Unit
    removeNpcFromScene(sceneId: Long!, npcId: Long!): Unit
}

type NonPlayerCharacter {
    header: NonPlayerCharacterHeader!
    jsonInfo: Json!
    version: String!
}

type NonPlayerCharacterHeader {
    id: Long!
    campaignId: Long!
    name: String!
}

type NonPlayerCharacterInfo {
    health: Health!
    armorClass: Int!
    classes: [PlayerCharacterClass!]!
    physicalCharacteristics: PhysicalCharacteristics!
    faith: String
    overrideInitiative: Int
    currentXp: Long
    alignment: Alignment!
    lifestyle: Lifestyle!
    abilities: Abilities!
    skills: Skills!
    background: Background
    race: Race!
    size: CreatureSize!
    traits: Traits!
    inventory: [InventoryItem!]!
    wallet: Wallet!
    feats: [Feat!]!
    conditions: [Condition!]!
    spellSlots: [SpellSlots!]!
    pactMagic: [SpellSlots!]!
    languages: [Language!]!
    actions: [Action!]!
    classSpells: [SpellHeader!]!
    creatures: [Creature!]!
    speeds: [Speed!]!
    senses: [SenseRange!]!
    hair: String!
    skin: String!
    eyes: String!
    height: String!
    weight: String!
    age: String!
    gender: String!
    conditionImmunities: [Condition!]!
    damageVulnerabilities: [DamageType!]!
    damageResistances: [DamageType!]!
    damageImmunities: [DamageType!]!
    notes: String!
    rollplayInfo: RollplayInfo!
    monster: Long
    challengeRating: ChallengeRating
    relationToPlayers: RelationToPlayers!
    personalityTraits: String!
    ideals: String!
    bonds: String!
    flaws: String!
    organizations: String!
    allies: String!
    enemies: String!
    backstory: String!
}

type PhysicalCharacteristics {
    gender: String
    age: Int
    hair: String
    eyes: String
    skin: String
    height: String
    weight: Int
    size: CreatureSize!
}

type PlayerCharacter {
    header: PlayerCharacterHeader!
    jsonInfo: Json!
    version: String!
}

type PlayerCharacterClass {
    characterClass: String!
    subclass: SubClass
    level: Int!
}

type PlayerCharacterHeader {
    id: Long!
    campaignId: Long!
    name: String!
    source: String!
    playerName: String
}

type Queries {
    monster(value: Long!): Monster
    playerCharacters(campaignId: Long!, playerCharacterSearch: PlayerCharacterSearchInput!): [PlayerCharacter!]
    scenes(value: Long!): [Scene!]
    nonPlayerCharacters(value: Long!): [NonPlayerCharacter!]
    playerCharacter(value: Long!): PlayerCharacter
    nonPlayerCharacter(value: Long!): NonPlayerCharacter
    encounters(value: Long!): [Encounter!]
    encounter(campaignId: Long!, encounterId: Long!): Encounter
    bestiary(name: String, challengeRating: ChallengeRating, size: CreatureSize, alignment: Alignment, biome: Biome, monsterType: MonsterType, source: SourceInput, orderCol: MonsterSearchOrder!, orderDir: OrderDirection!, page: Int!, pageSize: Int!): MonsterSearchResults
    sources: [Source!]
    classes: [CharacterClass!]
    races: [Race!]
    backgrounds: [Background!]
    subclasses(value: String!): [SubClass!]
    randomTables(randomTableType: RandomTableType): [RandomTable!]
    randomTable(value: Long!): RandomTable
    aiGenerateEncounterDescription(header: EncounterHeaderInput!, jsonInfo: Json!, version: String!): String
    aiGenerateNPCDetails(header: NonPlayerCharacterHeaderInput!, jsonInfo: Json!, version: String!): NonPlayerCharacterInfo
    aiGenerateNPCDescription(header: NonPlayerCharacterHeaderInput!, jsonInfo: Json!, version: String!): String
    npcsForScene(value: Long!): [KVLongListOfLong!]
}

type Race {
    name: String!
}

type RandomTable {
    id: Long!
    name: String!
    tableType: RandomTableType!
    subType: String!
    diceRoll: DiceRoll!
    entries: [RandomTableEntry!]!
}

type RandomTableEntry {
    randomTableId: Long!
    rangeLow: Int!
    rangeHigh: Int!
    name: String!
    description: String!
}

type RollplayInfo {
    occupation: String!
    personality: String!
    ideal: String!
    bond: String!
    flaw: String!
    characteristic: String!
    speech: String!
    hobby: String!
    fear: String!
    currently: String!
    nickname: String!
    weapon: String!
    rumor: String!
    raisedBy: String!
    parent1: String!
    parent2: String!
    siblingCount: Int!
    childhood: String!
    children: String!
    spouse: String!
}

type Scene {
    header: SceneHeader!
    jsonInfo: Json!
    version: String!
}

type SceneHeader {
    id: Long!
    campaignId: Long!
    name: String!
    orderCol: Int!
    isActive: Boolean!
}

type SenseRange {
    sense: Sense!
    range: Int!
}

type SingleAction {
    actionType: ActionType!
    name: String!
    description: String
    attackBonus: Int
    damage: DiceRoll
    dc: ActionDC
}

type Skill {
    skillType: SkillType!
    proficiencyLevel: ProficiencyLevel!
    advantage: AdvantageDisadvantage!
}

type Skills {
    acrobatics: Skill!
    animalHandling: Skill!
    arcana: Skill!
    athletics: Skill!
    deception: Skill!
    history: Skill!
    insight: Skill!
    intimidation: Skill!
    investigation: Skill!
    medicine: Skill!
    nature: Skill!
    perception: Skill!
    performance: Skill!
    persuasion: Skill!
    religion: Skill!
    sleightOfHand: Skill!
    stealth: Skill!
    survival: Skill!
}

type Source {
    name: String!
    id: String!
    url: String
}

type Speed {
    speedType: SpeedType!
    value: Int!
}

type SpellHeader {
    id: Long!
    name: String!
}

type SpellSlots {
    level: Int!
    used: Int!
    total: Int!
}

type SubClass {
    name: String!
}

type Traits {
    personalityTraits: String
    ideals: String
    bonds: String
    flaws: String
    appearance: String
}

type Wallet {
    pp: Long!
    gp: Long!
    ep: Long!
    sp: Long!
    cp: Long!
}
